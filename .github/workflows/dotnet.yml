name: .NET

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Debug --no-restore

      
  
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore
      
      - name: Start API for Integration Tests
        run: |
          dotnet run --project Backend/Backend.csproj --urls "http://localhost:5031" &
          echo $! > api.pid

      - name: Run Integration Tests
        run: dotnet test Backend.IntegrationTests/Backend.IntegrationTests.csproj --collect:"XPlat Code Coverage" --no-restore --results-directory ./TestResults

      - name: Stop API After Integration Tests
        run: kill $(cat api.pid)

      - name: Run Unit Tests
        run: dotnet test Backend.UnitTests/Backend.UnitTests.csproj --collect:"XPlat Code Coverage" --no-restore --results-directory ./TestResults

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Reports
        run: reportgenerator -reports:./TestResults/**/coverage.cobertura.xml -targetdir:./TestResults/coverage-html -reporttypes:Html

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: ./TestResults/coverage-html
          

  # deploy:
  #   runs-on: self-hosted
  #   needs: build

  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.x

  #     - name: Restore dependencies
  #       run: dotnet restore

  #     - name: Publish Application
  #       run: dotnet publish Backend/Backend.csproj -c Release -o ./publish

  #     - name: Deploy to Server
  #       run: |
  #         echo "Deploying application..."
  #         # Example: Use rsync, scp, or other deployment tools to transfer files to your server
  #         # scp -r ./publish/* user@server:/path/to/deploy/
  #         echo "Deployment complete."

  #     - name: Post-Deployment Validation
  #       run: |
  #         echo "Validating deployment..."
  #         # Add deployment validation commands, e.g., call the API or run a health check.
