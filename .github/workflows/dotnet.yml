name: .NET

on:
  push:
    branches: [ "main", "development", "workflow" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Debug --no-restore

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Start API for Integration Tests
        run: |
          dotnet run --project Backend/Backend.csproj --urls "http://localhost:5031" &
          echo $! > api.pid

      - name: Run Integration Tests
        run: dotnet test Backend.IntegrationTests/Backend.IntegrationTests.csproj --collect:"XPlat Code Coverage" --no-restore --results-directory ./TestResults

      - name: Stop API After Integration Tests
        run: kill $(cat api.pid)

      - name: Run Unit Tests
        run: dotnet test Backend.UnitTests/Backend.UnitTests.csproj --collect:"XPlat Code Coverage" --no-restore --results-directory ./TestResults

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Reports
        run: reportgenerator -reports:./TestResults/**/coverage.cobertura.xml -targetdir:./TestResults/coverage-html -reporttypes:Html

      - name: List Test Results Directory
        run: ls -R ./TestResults/

      - name: Display Coverage Report Content
        run: cat ./TestResults/**/coverage.cobertura.xml

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./TestResults/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '0 100'

      - name: Run code coverage
        run: |
          # Run coverage report
          #coverage xml

          # Report and write to summary.
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

          # Report again and fail if under 100%.
          coverage report --fail-under=100
          
      - name: Store coverage report
        uses: actions/upload-artifact@v4
        with:
          path: coverage.xml
        if: ${{ failure() }}

        # Write the coverage report to GitHub Actions summary
      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.DEPLOY_TOKEN }}

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.x

  #     - name: Publish
  #       run: dotnet publish Backend/Backend.csproj -c Release -o ./publish

  #     - name: Deploy
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
  #       run: |
  #         git config --global user.name "GitHub Actions"
  #         git config --global user.email "actions@github.com"
  #         git add ./publish
  #         git commit -m "Deploy application"
  #         git push
