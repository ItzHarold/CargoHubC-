name: .NET

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Debug --no-restore

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Setup .NET for C# tests
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Restore C# dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Start API for Integration Tests
      - name: Start API for Integration Tests
        run: |
          dotnet run --project Backend/Backend.csproj --urls "http://localhost:5031" &
          echo $! > api.pid

      # Run C# Integration Tests
      - name: Run Integration Tests
        run: dotnet test Backend.IntegrationTests/Backend.IntegrationTests.csproj --collect:"XPlat Code Coverage" --no-restore --results-directory ./TestResults

      # Stop API after Integration Tests
      - name: Stop API After Integration Tests
        run: kill $(cat api.pid)

      # Run C# Unit Tests
      - name: Run Unit Tests
        run: dotnet test Backend.UnitTests/Backend.UnitTests.csproj --collect:"XPlat Code Coverage" --no-restore --results-directory ./TestResults

      # Install ReportGenerator for C# Coverage
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Generate Coverage Reports for C#
      - name: Generate Coverage Reports
        run: reportgenerator -reports:./TestResults/**/coverage.cobertura.xml -targetdir:./TestResults/coverage-html -reporttypes:Html

      # List Test Results Directory
      - name: List Test Results Directory
        run: ls -R ./TestResults/

      # Display Coverage Report Content for C#
      - name: Display Coverage Report Content
        run: cat ./TestResults/**/coverage.cobertura.xml

      # Code Coverage Report Summary for C#
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./TestResults/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '0 100'

      # Store coverage report as an artifact
      - name: Store Coverage Report
        uses: actions/upload-artifact@v4
        with:
          path: ./TestResults/coverage-html
        if: ${{ success() }}

      # Write coverage summary to GitHub Actions summary
      - name: Write Coverage Summary
        run: cat ./TestResults/coverage-html/index.html >> $GITHUB_STEP_SUMMARY


  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Stash any uncommitted changes
      - name: Stash Uncommitted Changes
        run: |
          git stash

      # Fetch and switch to the development branch
      - name: Switch to Development Branch
        run: |
          git fetch origin
          git checkout development

      # Merge the workflow branch into development
      - name: Merge Workflow into Development
        run: |
          git merge workflow --no-ff -m "Merge workflow into development"

      # Push changes to the development branch
      - name: Push to Development Branch
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          git push origin development

      # Apply stashed changes for post-deployment review (optional)
      - name: Apply Stashed Changes
        if: always() # Always run this step, even if previous steps fail
        run: |
          git stash apply || echo "No stashed changes to apply"

      # Modify and commit changes after deployment (optional)
      - name: Modify and Commit Changes
        if: always()
        run: |
          # Perform necessary edits here if needed
          git add .
          git commit -m "Post-deployment changes" || echo "No changes to commit"
          git push origin development || echo "No changes to push"
